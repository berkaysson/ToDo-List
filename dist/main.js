/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Project.js":
/*!************************!*\
  !*** ./src/Project.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst projectFactory = (name, color) => { //will remove color prop\r\n    let tasks = [];\r\n\r\n    const addTask = (newTask) => {\r\n        tasks.push(newTask);\r\n    }\r\n\r\n    return {\r\n        addTask, tasks, name, color\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (projectFactory);\n\n//# sourceURL=webpack://todo-list/./src/Project.js?");

/***/ }),

/***/ "./src/Storage.js":
/*!************************!*\
  !*** ./src/Storage.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Task */ \"./src/Task.js\");\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Project */ \"./src/Project.js\");\n/* harmony import */ var _TodoList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TodoList */ \"./src/TodoList.js\");\n\r\n\r\n\r\n\r\nclass Storage {\r\n\r\n    static setTodolist(data) { // sets Todolist to local storage\r\n        localStorage.setItem(\"todolist\", JSON.stringify(data));\r\n    }\r\n\r\n    static getTodolist() {  // gets Todolist from local storage and add properties of it to a new todolist that create by todolistFactory()\r\n        if (localStorage.getItem('todolist') === null) { // this will be create an empty todolist because no list were created\r\n            let newTodolist = (0,_TodoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()\r\n            let homeProject = (0,_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Home\", \"no color\")\r\n            let todayProject = (0,_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Today\", \"no color\")\r\n            let thisweekProject = (0,_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"This Week\", \"no color\")\r\n            newTodolist.addProject(homeProject)\r\n            newTodolist.addProject(todayProject)\r\n            newTodolist.addProject(thisweekProject) // custom projects\r\n            Storage.setTodolist(newTodolist); // sets empty todolist\r\n            return newTodolist;\r\n        }\r\n\r\n        let todolistParsed = JSON.parse(localStorage.getItem('todolist')) // if todolist setted before, this gets it and parsed it to new object\r\n        let todolist = (0,_TodoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();   // empty todolist, this will take properties from parsed one\r\n        for (let projectKey = 0; projectKey < todolistParsed[\"projects\"].length; projectKey++) { // iterate over projects of todolistParsed and add them to new empty todolist\r\n            let projectParsed = todolistParsed[\"projects\"][projectKey] // projects from parsed todolist\r\n            let project = (0,_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(projectParsed.name, projectParsed.color);\r\n            for (let taskKey = 0; taskKey < projectParsed[\"tasks\"].length; taskKey++) {\r\n                let taskParsed = projectParsed[\"tasks\"][taskKey]; // tasks from parsed todolist and parsed projects\r\n                let task = (0,_Task__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(taskParsed.name, taskParsed.description,\r\n                    taskParsed.date, taskParsed.tag);\r\n                project.addTask(task);  // adds tasks to projects\r\n            }\r\n            todolist.addProject(project);   // adds projects to todolist and return it thus it gives a todolistFactory object with properties from localStorage \r\n            // (parsed todolist is another object not created by todolistFactory)\r\n        }\r\n        return todolist\r\n    }\r\n\r\n    static getAllProjects() {\r\n        return Storage.getTodolist().projects;\r\n    }\r\n\r\n    static getProject(projectName) {\r\n        return Storage.getTodolist().projects.find(item => item.name === projectName);\r\n    }\r\n\r\n    static addProject(project) {\r\n        let todolist = Storage.getTodolist();\r\n        const newProject = (0,_Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(project, \"no color\");\r\n        todolist.addProject(newProject);\r\n        Storage.setTodolist(todolist);\r\n    }\r\n\r\n    static deleteProject(projectName) {\r\n        let todolist = Storage.getTodolist();\r\n        todolist.projects = todolist.projects.filter(_project => _project.name !== projectName); // filters unmatched projects to new projects array\r\n        Storage.setTodolist(todolist);\r\n    }\r\n\r\n    static editProject(projectName, newName) {\r\n        let todolist = Storage.getTodolist();\r\n        let project = todolist.projects.find(item => item.name === projectName);\r\n        project.name = newName;\r\n        Storage.setTodolist(todolist)\r\n    }\r\n\r\n    static addTask(projectName, task) {\r\n        let todolist = Storage.getTodolist();\r\n        todolist.projects.find(item => item.name === projectName).addTask(task);\r\n        Storage.setTodolist(todolist);\r\n    }\r\n\r\n    static deleteTask(projectName, taskName) {\r\n        let todolist = Storage.getTodolist();\r\n        todolist.projects.find(item => item.name === projectName).tasks =\r\n            todolist.projects.find(item => item.name === projectName).tasks.filter(task => task.name !== taskName); // finds the project that tasks and removes task \r\n        Storage.setTodolist(todolist);\r\n    }\r\n\r\n    static editTask(projectName, taskName, newTask) {\r\n        let todolist = Storage.getTodolist();\r\n        // may make loop for all prop.\r\n        todolist.projects.find(item => item.name === projectName).tasks.find(item => item.name === taskName).description = newTask.description\r\n        todolist.projects.find(item => item.name === projectName).tasks.find(item => item.name === taskName).date = newTask.date\r\n        todolist.projects.find(item => item.name === projectName).tasks.find(item => item.name === taskName).tag = newTask.tag\r\n        todolist.projects.find(item => item.name === projectName).tasks.find(item => item.name === taskName).name = newTask.name // it is important to change name lastly otherwise can't find task by name\r\n        Storage.setTodolist(todolist);\r\n    }\r\n\r\n    static getAllTasks() {\r\n        let projects = Storage.getAllProjects();\r\n        let tasks = [];\r\n        for (let i = 0; i < projects.length; i++) {\r\n            for (let j = 0; j < projects[i].tasks.length; j++) {\r\n                tasks.push(projects[i].tasks[j])\r\n            }\r\n        }\r\n        return tasks\r\n    }\r\n\r\n    static getAllTags() {\r\n        let projects = Storage.getAllProjects();\r\n        let tags = new Set();   // used Set to tak only unique values\r\n        for (let i = 0; i < projects.length; i++) {\r\n            for (let j = 0; j < projects[i].tasks.length; j++) {\r\n                if (projects[i].tasks[j].tag.includes(\",\")) { // splits tags by commas\r\n                    let subTags = projects[i].tasks[j].tag.split(\",\")\r\n                    for (let tag of subTags) {\r\n                        tags.add(tag)\r\n                    }\r\n                }\r\n                else {\r\n                    tags.add(projects[i].tasks[j].tag)\r\n                }\r\n            }\r\n        }\r\n        return tags\r\n    }\r\n}\n\n//# sourceURL=webpack://todo-list/./src/Storage.js?");

/***/ }),

/***/ "./src/Task.js":
/*!*********************!*\
  !*** ./src/Task.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskFactory = (name, description, date, _tag) => {\r\n    let tag = _tag.replace(/\\s/g, '') // removes white spaces from tags\r\n    return {\r\n        name, description, date, tag\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskFactory);\n\n//# sourceURL=webpack://todo-list/./src/Task.js?");

/***/ }),

/***/ "./src/TodoList.js":
/*!*************************!*\
  !*** ./src/TodoList.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst todolistFactory = () => {\r\n    let projects = [];\r\n\r\n    const addProject = (newProject) => {\r\n        projects.push(newProject);\r\n    }\r\n\r\n    return {\r\n        addProject, projects\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (todolistFactory);\n\n//# sourceURL=webpack://todo-list/./src/TodoList.js?");

/***/ }),

/***/ "./src/UIController.js":
/*!*****************************!*\
  !*** ./src/UIController.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UI)\n/* harmony export */ });\n/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Storage */ \"./src/Storage.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Task */ \"./src/Task.js\");\n\r\n\r\n\r\nclass UI {\r\n\r\n    static pageRender() {   // renders page\r\n        UI.projectLoader()\r\n        UI.taskLoader(\"Home\")   // load Home custom\r\n        UI.initButtonEvents()   // initiates buttons\r\n    }\r\n\r\n    static projectLoader() {\r\n        for (let i = 0; i < 3; i++) { // First three project of todolist is custom projects\r\n            if (_Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name === \"Home\" ||\r\n                _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name === \"Today\" ||\r\n                _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name === \"This Week\") {\r\n                document.getElementById(`${_Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name.replace(/\\s/g, '')}`).addEventListener(\"click\",\r\n                    () => {\r\n                        document.getElementById(\"add-task-btn\").style.display = \"block\" // today and this week will not have add new task button, they will display tasks acc to dates\r\n                        UI.taskLoader(_Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name)\r\n                        document.getElementById(\"tags\").style.display = \"none\"\r\n                    })\r\n            }\r\n        }\r\n        UI.createNavElement()\r\n    }\r\n\r\n    static createNavElement() { // loads all created projects not custom projects (Home, Today, This week)\r\n        const nav = document.getElementById(\"nav-project\");\r\n        nav.textContent = \"\";\r\n        for (let i = 3; i < _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects().length; i++) { // iterate over all projects and creates and loads projects as nav items\r\n            let project = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProject(_Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllProjects()[i].name)\r\n\r\n            let navProjectItem = document.createElement(\"div\")\r\n            navProjectItem.setAttribute(\"id\", `${project.name}`)\r\n\r\n            let projectLink = document.createElement(\"a\");\r\n            projectLink.setAttribute(\"class\", \"nav-item project-item\");\r\n\r\n            const editProjectButton = document.createElement(\"button\");\r\n            editProjectButton.setAttribute(\"class\", `fa-regular fa-pen-to-square`)\r\n\r\n            let projectNameNode = document.createTextNode(`${project.name}`);\r\n            projectLink.appendChild(projectNameNode)\r\n\r\n            projectLink.addEventListener(\"click\", () => {   // add event to projects to load tasks of it\r\n                UI.taskLoader(project.name)\r\n                document.getElementById(\"add-task-btn\").style.display = \"block\"\r\n                document.getElementById(\"tags\").style.display = \"none\"\r\n            })\r\n\r\n            editProjectButton.addEventListener(\"click\", () => {\r\n                UI.createNavElement()\r\n                UI.editProject(project.name)\r\n            })\r\n\r\n            navProjectItem.appendChild(editProjectButton)\r\n            navProjectItem.appendChild(projectLink)\r\n\r\n            nav.appendChild(navProjectItem);\r\n        }\r\n    }\r\n\r\n    static taskLoader(projectName) {    // loads task of named project\r\n        let tasks = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProject(projectName).tasks  // gets named projects tasks\r\n        document.getElementById(\"project-name\").textContent = `${projectName}`\r\n\r\n        const tasksDiv = document.getElementById(\"project-tasks\")\r\n        tasksDiv.textContent = \"\"\r\n\r\n        for (let i = 0; i < tasks.length; i++) {\r\n            let taskDiv = `\r\n                <tr id=\"task-${tasks[i].name}\">\r\n                    \r\n                <th><p id = \"task-name\">${tasks[i].name}</p></th>\r\n                <th><p>${tasks[i].description}</p></th>\r\n                <th>${tasks[i].date}</th>\r\n                <th>${tasks[i].tag}</th>\r\n                </tr>\r\n                <button id=\"btn-${tasks[i].name}\" class=\"fa-regular fa-pen-to-square edit-task\"></button>\r\n                `;\r\n\r\n            tasksDiv.insertAdjacentHTML(\"beforeend\", taskDiv);\r\n        }\r\n\r\n        let editTaskBtn = document.querySelectorAll(\".edit-task\")\r\n        editTaskBtn.forEach(btn => {\r\n            btn.addEventListener(\"click\", () => {\r\n                UI.editTask(btn.id.substring(4)) // removes 'btn-' part from id and gets only name of task\r\n            });\r\n        })\r\n    }\r\n\r\n    static editProject(projectName) {\r\n        let projectDiv = document.getElementById(`${projectName}`)\r\n        projectDiv.textContent = \"\";\r\n\r\n        const editProjectNameInput = document.createElement(\"input\");\r\n        editProjectNameInput.setAttribute(\"value\", `${projectName}`)\r\n\r\n        const projectEditApproveBtn = document.createElement(\"button\")\r\n        const projectEditCancelBtn = document.createElement(\"button\")\r\n        const projectEditDeleteBtn = document.createElement(\"button\")\r\n\r\n        projectEditApproveBtn.setAttribute(\"class\", \"fa-solid fa-check btn\")\r\n        projectEditCancelBtn.setAttribute(\"class\", \"fa-solid fa-xmark btn\")\r\n        projectEditDeleteBtn.setAttribute(\"class\", \"fa-solid fa-trash\")\r\n\r\n        projectEditApproveBtn.addEventListener(\"click\", () => {\r\n            if (!UI.checkField(editProjectNameInput.value, \"Project Name\")) return\r\n            _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].editProject(projectName, editProjectNameInput.value);\r\n            UI.createNavElement();\r\n        })\r\n        projectEditCancelBtn.addEventListener(\"click\", () => {\r\n            UI.createNavElement()\r\n        })\r\n        projectEditDeleteBtn.addEventListener(\"click\", () => {\r\n            _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProject(projectName);\r\n            UI.createNavElement()\r\n        })\r\n\r\n        projectDiv.appendChild(editProjectNameInput);\r\n        projectDiv.appendChild(projectEditApproveBtn);\r\n        projectDiv.appendChild(projectEditCancelBtn);\r\n        projectDiv.appendChild(projectEditDeleteBtn);\r\n    }\r\n\r\n    static editTask(taskName) {\r\n        UI.taskLoader(UI.getActiveProjectName())\r\n\r\n        let taskDiv = document.getElementById(`task-${taskName}`)\r\n        let task = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProject(UI.getActiveProjectName()).tasks.find(item => item.name === taskName) // find task\r\n\r\n        taskDiv.innerHTML = `\r\n            <tr>\r\n            <th><input name=\"name\" class=\"edit-task-input\" type=\"text\" placeholder=\"Name\" max=\"20\" min=\"2\" value = ${task.name}></th>\r\n            <th><input class=\"edit-task-input\" type=\"text\" placeholder=\"Description\" max=\"100\" value = ${task.description}></th>\r\n            <th><input name=\"due-date\" class=\"edit-task-input\" type=\"date\" value = ${task.date}></th>\r\n            <th><input class=\"edit-task-input\" type=\"text\" value = ${task.tag}></th>\r\n            </tr>\r\n            <button id = \"edit-task-approve-${task.name}\" class=\"btn\"><i class=\"fa-solid fa-check btn\"></i></button>\r\n            <button id = \"edit-task-cancel-${task.name}\" class=\"btn\"><i class=\"fa-solid fa-xmark btn\"></i></button>\r\n            <button id = \"edit-task-delete-${task.name}\" class=\"btn\"><i class=\"fa-solid fa-trash btn\"></i></button>\r\n            `;\r\n\r\n        let editTaskApproveBtn = document.getElementById(`edit-task-approve-${task.name}`);\r\n        let editTaskCancelBtn = document.getElementById(`edit-task-cancel-${task.name}`);\r\n        let editTaskdeleteBtn = document.getElementById(`edit-task-delete-${task.name}`);\r\n\r\n        let editTaskInputs = document.querySelectorAll(\".edit-task-input\")\r\n\r\n        editTaskApproveBtn.addEventListener(\"click\", () => {\r\n            let formsFilled = false;    // checks if name and due date form inputs filled\r\n            if (UI.checkField(editTaskInputs[0].value, \"Task Name\") && UI.checkField(editTaskInputs[2].value, \"Task Due Date\")) {\r\n                formsFilled = true\r\n            }\r\n            if (formsFilled) {\r\n                let newTask = (0,_Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(editTaskInputs[0].value, editTaskInputs[1].value, editTaskInputs[2].value, editTaskInputs[3].value)   // will make loop for all prop.\r\n                _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].editTask(UI.getActiveProjectName(), task.name, newTask);\r\n                UI.taskLoader(UI.getActiveProjectName())\r\n            }\r\n        })\r\n        editTaskCancelBtn.addEventListener(\"click\", () => {\r\n            UI.taskLoader(UI.getActiveProjectName())\r\n        })\r\n        editTaskdeleteBtn.addEventListener(\"click\", () => {\r\n            _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(UI.getActiveProjectName(), task.name)\r\n            UI.taskLoader(UI.getActiveProjectName())\r\n        })\r\n    }\r\n\r\n    static addProjectForm() {\r\n        const addProjectBtn = document.getElementById(\"add-project-btn\");\r\n        const addProjectForm = document.getElementById(\"add-project-form\");\r\n        const addProjectFormInput = document.getElementById(\"project-name-input\");\r\n        const addProjectFormBtn = document.getElementById(\"add-project-form-btn\");\r\n        const cancelProjectFormBtn = document.getElementById(\"cancel-project-form-btn\");\r\n\r\n        addProjectBtn.addEventListener(\"click\", () => {\r\n            addProjectForm.style.display = \"block\";\r\n        });\r\n\r\n        addProjectFormBtn.addEventListener(\"click\", () => {\r\n            if (UI.checkField(addProjectFormInput.value, \"Project Name\")) {\r\n                _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addProject(addProjectFormInput.value);\r\n                UI.createNavElement()\r\n                addProjectForm.style.display = \"none\";\r\n                addProjectFormInput.value = \"\"\r\n            }\r\n            else { return }\r\n        })\r\n\r\n        cancelProjectFormBtn.addEventListener(\"click\", () => {\r\n            addProjectForm.style.display = \"none\";\r\n            addProjectFormInput.value = \"\"\r\n        })\r\n    }\r\n\r\n    static addTaskForm() {\r\n        let newTaskBtn = document.getElementById(\"add-task-btn\")\r\n        let taskInputs = document.querySelectorAll(\".task-input\");\r\n        let addTaskForm = document.getElementById(\"add-task-form\");\r\n        let addTaskFormBtn = document.getElementById(\"add-task-form-btn\");\r\n        let cancelTaskFormBtn = document.getElementById(\"cancel-task-form-btn\");\r\n\r\n        newTaskBtn.addEventListener(\"click\", () => {\r\n            addTaskForm.style.display = \"table\"\r\n        })\r\n        addTaskFormBtn.addEventListener(\"click\", () => {\r\n            let formsFilled = false\r\n            if (UI.checkField(taskInputs[0].value, \"Task Name\") && UI.checkField(taskInputs[2].value, \"Task Due Date\")) {\r\n                formsFilled = true\r\n            }\r\n\r\n            if (formsFilled) {\r\n                let newTask = (0,_Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(taskInputs[0].value, taskInputs[1].value, taskInputs[2].value, taskInputs[3].value) // will make loop for all prop.\r\n                _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addTask(UI.getActiveProjectName(), newTask)\r\n                UI.taskLoader(UI.getActiveProjectName())\r\n                addTaskForm.style.display = \"none\";\r\n                taskInputs.forEach(item => {\r\n                    item.value = \"\";\r\n                })\r\n            }\r\n        })\r\n\r\n        cancelTaskFormBtn.addEventListener(\"click\", () => {\r\n            addTaskForm.style.display = \"none\"\r\n            taskInputs.forEach(item => {\r\n                item.value = \"\"\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    static tags() {\r\n        const tagsNav = document.getElementById(\"TagsNav\")\r\n        const tasksDiv = document.getElementById(\"project-tasks\")\r\n        const addTaskBtn = document.getElementById(\"add-task-btn\")\r\n\r\n        tagsNav.addEventListener(\"click\", () => {\r\n            document.getElementById(\"project-name\").textContent = \"Sort tasks by Tags\";\r\n            document.getElementById(\"tags\").style.display = \"block\"\r\n            tasksDiv.textContent = \"\"\r\n            addTaskBtn.style.display = \"none\"\r\n            UI.createTagBtn(_Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllTags())\r\n        })\r\n    }\r\n\r\n    static createTagBtn(tagSet) { // tagSet is a set for all unique tags (it is Set)\r\n        let tagsDiv = document.getElementById(\"tags\")\r\n        const tasksDiv = document.getElementById(\"project-tasks\")\r\n\r\n        tagsDiv.textContent = \"\"\r\n\r\n        tagSet.forEach(tag => {\r\n            let tagFilter = document.createElement(\"button\");\r\n            tagFilter.setAttribute(\"class\", \"tag-filter\");\r\n            tagFilter.textContent = tag;\r\n            tagFilter.addEventListener(\"click\", () => {\r\n                tagFilter.classList.toggle(\"active\")    // activate tag\r\n\r\n                let activeTags = [];\r\n                let activeTasks = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllTasks();    // initially there is no active tag so all tasks active\r\n\r\n                tagsDiv.childNodes.forEach(item => {\r\n                    if (item.classList.contains(\"active\")) {\r\n                        activeTags.push(item.textContent)   // if tag is active, pushes it to activeTags\r\n                    }\r\n                })\r\n\r\n                tasksDiv.textContent = \"\"\r\n\r\n                for (let task of _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllTasks()) {   // checks if task contains all activeTags, if not it removes that task from activeTasks\r\n                    let tagsofTask = [] // tags of that task\r\n                    if (task.tag.includes(\",\")) {\r\n                        task.tag.split(\",\").forEach(e => {\r\n                            tagsofTask.push(e)\r\n                        });\r\n                    }\r\n                    else tagsofTask.push(task.tag)\r\n                    for (let _tag of activeTags) {  // removes tasks from activeTasks if not contains all active tags\r\n                        if (!tagsofTask.includes(_tag)) {\r\n                            activeTasks = activeTasks.filter(_task => _task.name !== task.name)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let task of activeTasks) { // displays remainder activeTasks\r\n                    let taskDiv = `\r\n                            <tr id=\"task-${task.name}\">\r\n                                \r\n                            <th><p id = \"task-name\">${task.name}</p></th>\r\n                            <th><p>${task.description}</p></th>\r\n                            <th>${task.date}</th>\r\n                            <th>${task.tag}</th>\r\n                            </tr>\r\n                            `;\r\n                    tasksDiv.insertAdjacentHTML(\"beforeend\", taskDiv);\r\n                }\r\n            })\r\n            tagsDiv.appendChild(tagFilter)\r\n        })\r\n    }\r\n\r\n    static getActiveProjectName() {\r\n        let activeProject = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProject(document.getElementById(\"project-name\").textContent);\r\n        return activeProject.name\r\n    }\r\n\r\n    static checkField(fieldValue, fieldName) {\r\n        if (fieldValue === \"\") {\r\n            alert(`${fieldName} form must be filled`)\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    static initButtonEvents() {\r\n        UI.addProjectForm()\r\n        UI.addTaskForm()\r\n        UI.tags()\r\n    }\r\n}\n\n//# sourceURL=webpack://todo-list/./src/UIController.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _UIController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIController */ \"./src/UIController.js\");\n\r\n\r\n_UIController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pageRender() //renders page\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;